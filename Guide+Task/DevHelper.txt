
/// HWND
У каждого окна есть уникальный идентификатор HWND. Этот идентификатор указывает на окно. По этому номеру другие приложения смогут "опознать" окно и проделать с ним какие-либо операции.

/// HINSTANCE
Дескриптор экземпляра приложения. Этот дескриптор содержит адрес начала кода программы в ее адресном пространстве. Дескриптор hInstance чаще всего требуется функциям, работающим с ресурсами программы.

/// HANDLE
Дескриптор объекта.

/// HDC
Дескриптор контекста устройства. От фразы handle device context. 

/// HDC GetDC
(
  HWND hWnd   // дескриптор окна
);
Функция извлекает дескриптор дисплейного контекста устройства для рабочей области заданного окна или для всего экрана. 

/// WPARAM, LPARAM
Дополнительная информация о сообщении. Каждое сообщение содержит свои индивидуальные параметры lParam и wParam.

/// DWORD
32-битное беззнаковое целое. Аналоги: unsigned long int, UINT.

/// UINT
32-битное беззнаковое целое. Аналоги: unsigned long int, DWORD.

/// BOOL InvalidateRect 
( 
	HWND,		 // указатель на окно. Если первый параметр NULL, то будут перерисованы все окна. 
	CONST RECT * // прямоугольник перерисовки. Если второй параметр NULL, то будет перерисована вся область окна.
	BOOL		 // режим перерисовки. Параметр указывает на действия с фоном, если TRUE, то фон будет стерт, иначе оставлен.
);
Функция указывает прямоугольник для перерисовки окна. При удачном выполнении этой функции результат отличен от нуля.

/// BOOL UpdateWindow
( 
	HWND hWnd	 // окно
);
Функция обновляет содержимое окна, посылая сообщение WM_PAINT непосредственно в оконную процедуру. При успешном выполнении возвращается ненулевое значение. Вы можете сказать, что тоже самое можно сделать с помощью InvalidateRect(). А вот и не совсем так. Сообщение перерисовки посылается непосредственно в оконную процедуру минуя очередь сообщений, то есть обновление происходит сразу без задержки, которая может возникнуть в результате интенсивного ввода информации пользователем. 

/// BOOL Ellipse
(
	HDC,		 // указатель на окно. Если первый параметр NULL, то будут перерисованы все окна. 
	X1, Y1, 	 // веpхний левый угол огpаничивающего пpямоугольника.
	X2, Y2		 // пpавый нижний угол огpаничивающего пpямоугольника.
);
Функция рисует эллипс, центpиpованный в огpаничивающем пpямоугольнике, гpаница котоpого наpисована текущим пеpом и заполнена текущей кистью. При удачном выполнении этой функции результат отличен от нуля.

/// INT ReleaseDC(
  HWND hWnd,  // дескриптор окна
  HDC hDC     // дескриптор контекста устройства (DC)
);
Функция освобождает контекст устройства для использования другими приложениями. Действие функции ReleaseDC зависит от типа контекста устройства (DC). Она освобождает только общий и контекст устройства (DC) окна.

/// BOOL GetWindowRect и BOOL GetClientRect
( 
	HWND hWnd, 		// указатель на окно
	LPRECT lpRect   // указатель на структуру { right, left, bottom, top } с координатами
);
Для получение прямоугольника приложения используется функция GetWindowRect. Результат возвращается в единицах экрана (т.е. пикселах) относительно левого верхнего угла экрана.
Для получение прямоугольника клиента используется функция GetClientRect. Заголовок окна, строка меню, меню окна, минимизирующие и максимизирущие кнопки, границы являются неклиентской областью.