<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0037)http://www.ixbt.com/storage/ntfs.html -->
<HTML><HEAD><TITLE>iXBT: Файловая система NTFS</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1251">
<STYLE type=text/css>.default {
	FONT-SIZE: 8pt; FONT-FAMILY: Verdana
}
SMALL {
	FONT-SIZE: 8pt; FONT-FAMILY: Verdana
}
SUB {
	FONT-SIZE: 8pt; FONT-FAMILY: Verdana
}
SUP {
	FONT-SIZE: 8pt; FONT-FAMILY: Verdana
}
.small {
	FONT-SIZE: 8pt; FONT-FAMILY: Arial
}
.center {
	TEXT-ALIGN: center
}
.right {
	TEXT-ALIGN: right
}
.left {
	TEXT-ALIGN: left
}
.equ {
	FONT-FAMILY: Symbol
}
P {
	FONT-SIZE: 10pt; TEXT-INDENT: 0em; FONT-FAMILY: Verdana; TEXT-ALIGN: justify
}
LI {
	FONT-SIZE: 10pt; TEXT-INDENT: 0em; FONT-FAMILY: Verdana; TEXT-ALIGN: justify
}
TD {
	FONT-SIZE: 10pt; FONT-FAMILY: Verdana
}
TH {
	FONT-SIZE: 10pt; FONT-FAMILY: Verdana
}
TABLE {
	FONT-SIZE: 10pt; FONT-FAMILY: Verdana
}
UL {
	FONT-SIZE: 10pt; FONT-FAMILY: Verdana
}
OL {
	FONT-SIZE: 10pt; FONT-FAMILY: Verdana
}
H1 {
	FONT-SIZE: 17pt; FONT-FAMILY: Verdana; TEXT-ALIGN: center
}
H2 {
	FONT-SIZE: 15pt; FONT-FAMILY: Verdana; TEXT-ALIGN: center
}
H3 {
	FONT-SIZE: 13pt; FONT-FAMILY: Verdana; TEXT-ALIGN: left
}
H4 {
	FONT-SIZE: 11pt; FONT-FAMILY: Verdana; TEXT-ALIGN: left
}
.NOBR {
	WHITE-SPACE: nowrap
}
</STYLE>
<LINK href="http://www.ixbt.com/favicon.ico" rel="shortcut icon">
<META content="MSHTML 6.00.2713.1100" name=GENERATOR></HEAD>
<BODY vLink=#800080 aLink=#4040ff link=#0000ff bgColor=#ffffff>
<CENTER><MAP name=bar><AREA shape=RECT alt="на главную страницу" 
  coords=0,7,82,17 href="http://www.ixbt.com/"><AREA shape=RECT 
  alt="на главную страницу" coords=188,14,288,24 
  href="http://www.ixbt.com/"><AREA shape=RECT alt="на главную страницу" 
  coords=519,8,595,48 href="http://www.ixbt.com/"></MAP><IMG height=52 alt="" 
src="iXBT Файловая система NTFS_files/2-top.gif" width=600 useMap=#bar 
border=0><BR><IMG height=2 alt="" 
src="iXBT Файловая система NTFS_files/empty.gif" width=600 border=0><BR><!-- Спонсорство в разделе 600х90 -->
<CENTER></CENTER><!-- Спонсорство в разделе 600х90 -->
<TABLE cellSpacing=0 cellPadding=0 width=600 border=0>
  <TBODY>
  <TR>
    <TD class=small align=middle><A 
      href="http://www.ixbt.com/news/index.shtml">Коротко</A> | <A 
      href="http://www.ixbt.com/cpu.shtml">Процессоры</A> | <A 
      href="http://www.ixbt.com/mainboard.shtml">Системные платы</A> | <A 
      href="http://www.ixbt.com/video.shtml">Видеосистема</A> | <A 
      href="http://www.ixbt.com/storage.shtml">Носители информации</A> | <A 
      href="http://www.ixbt.com/multimedia.shtml">Мультимедиа</A> | <A 
      href="http://www.ixbt.com/peripheral.shtml">Периферия</A> | <A 
      href="http://www.ixbt.com/communication.shtml">Коммуникации</A> | <A 
      href="http://www.ixbt.com/mobile.shtml">Мобильная связь</A> | <A 
      href="http://www.ixbt.com/digimage.shtml">Изображение в числах</A> | <A 
      href="http://www.ixbt.com/portopc.shtml">Портативные ПК</A> | <A 
      href="http://www.ixbt.com/editorial.shtml">Колонка редактора</A> | <A 
      href="http://computorg.ixbt.com/monitoring.shtml">Мониторинги цен</A> | <A 
      href="http://www.ixbt.com/search.shtml">Поиск</A> | <A 
      href="http://forum.ixbt.com/">Конференция</A> | <A 
      href="http://computorg.ixbt.com/guides.shtml">Искусство покупать</A> | <A 
      href="http://www.komok.com/">Барахолка</A> | <A 
      href="http://computorg.ixbt.com/">Новости московского рынка</A> | <A 
      href="http://mag.ixbt.com/">Журнал</A> <!--begin of Top100--><A 
      href="http://top100.rambler.ru/top100/"><IMG height=1 
      alt="Rambler's Top100" src="iXBT Файловая система NTFS_files/top100.gif" 
      width=1 border=0></A> <!--end of Top100 code--><!-- Текстовая строка рекламы сквозная по разделу --><BR><BR><!-- Конец: Текстовая строка рекламы сквозная по разделу --></TD></TR></TBODY></TABLE></CENTER><BR>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width=600 border=0>
  <TBODY>
  <TR>
    <TD>
      <H1>Файловая система NTFS</H1>
      <CENTER><A 
      href="http://rose.ixbt.com/cgi-bin/click_i.cgi?id=1020&amp;pg=446"><IMG 
      height=60 alt="" 
      src="iXBT Файловая система NTFS_files/canond60-nikond100.gif" width=468 
      border=0></A></CENTER><BR><IMG height=1 alt="" 
      src="iXBT Файловая система NTFS_files/empty.gif" width=1 align=right 
      border=0> <BR>
      <BLOCKQUOTE><EM>Операционные системы Microsoft семейства Windows NT 
        нельзя представить без файловой системы NTFS - одной из самых сложных и 
        удачных из существующих на данный момент файловых систем. Данная статья 
        расскажет вам, в чем особенности и недостатки этой системы, на каких 
        принципах основана организация информации, и как поддерживать систему в 
        стабильном состоянии, какие возможности предлагает NTFS и как их можно 
        использовать обычному пользователю.</EM></BLOCKQUOTE>
      <H2>Часть 1. Физическая структура NTFS</H2>
      <P>Начнем с общих фактов. Раздел NTFS, теоретически, может быть почти 
      какого угодно размера. Предел, конечно, есть, но я даже не буду указывать 
      его, так как его с запасом хватит на последующие сто лет развития 
      вычислительной техники - при любых темпах роста. Как обстоит с этим дело 
      на практике? Почти так же. Максимальный размер раздела NTFS в данный 
      момент ограничен лишь размерами жестких дисков. NT4, правда, будет 
      испытывать проблемы при попытке установки на раздел, если хоть 
      какая-нибудь его часть отступает более чем на 8 Гб от физического начала 
      диска, но эта проблема касается лишь загрузочного раздела.</P>
      <BLOCKQUOTE><STRONG>Лирическое отступление.</STRONG> Метод инсталляции 
        NT4.0 на пустой диск довольно оригинален и может навести на неправильные 
        мысли о возможностях NTFS. Если вы укажете программе установки, что 
        желаете отформатировать диск в NTFS, максимальный размер, который она 
        вам предложит, будет всего 4 Гб. Почему так мало, если размер раздела 
        NTFS на самом деле практически неограничен? Дело в том, что установочная 
        секция просто не знает этой файловой системы :) Программа установки 
        форматирует этот диск в обычный FAT, максимальный размер которого в NT 
        составляет 4 Гбайт (с использованием не совсем стандартного огромного 
        кластера 64 Кбайта), и на этот FAT устанавливает NT. А вот уже в 
        процессе первой загрузки самой операционной системы (еще в установочной 
        фазе) производится быстрое преобразование раздела в NTFS; так что 
        пользователь ничего и не замечает, кроме странного "ограничения" на 
        размер NTFS при установке. :) </BLOCKQUOTE>
      <H3>Структура раздела - общий взгляд</H3>
      <P>Как и любая другая система, NTFS делит все полезное место на кластеры - 
      блоки данных, используемые единовременно. NTFS поддерживает почти любые 
      размеры кластеров - от 512 байт до 64 Кбайт, неким стандартом же считается 
      кластер размером 4 Кбайт. Никаких аномалий кластерной структуры NTFS не 
      имеет, поэтому на эту, в общем-то, довольно банальную тему, сказать особо 
      нечего.</P>
      <P>Диск NTFS условно делится на две части. Первые 12% диска отводятся под 
      так называемую MFT зону - пространство, в которое растет метафайл MFT (об 
      этом ниже). Запись каких-либо данных в эту область невозможна. MFT-зона 
      всегда держится пустой - это делается для того, чтобы самый главный, 
      служебный файл (MFT) не фрагментировался при своем росте. Остальные 88% 
      диска представляют собой обычное пространство для хранения файлов. 
      <CENTER><IMG height=158 alt="" 
      src="iXBT Файловая система NTFS_files/image001.gif" width=518 border=0> 
      </CENTER>
      <P>Свободное место диска, однако, включает в себя всё физически свободное 
      место - незаполненные куски MFT-зоны туда тоже включаются. Механизм 
      использования MFT-зоны таков: когда файлы уже нельзя записывать в обычное 
      пространство, MFT-зона просто сокращается (в текущих версиях операционных 
      систем ровно в два раза), освобождая таким образом место для записи 
      файлов. При освобождении места в обычной области MFT зона может снова 
      расширится. При этом не исключена ситуация, когда в этой зоне остались и 
      обычные файлы: никакой аномалии тут нет. Что ж, система старалась оставить 
      её свободной, но ничего не получилось. Жизнь продолжается... Метафайл MFT 
      все-таки может фрагментироваться, хоть это и было бы нежелательно.</P>
      <H3>MFT и его структура</H3>
      <P>Файловая система NTFS представляет собой выдающееся достижение 
      структуризации: <STRONG>каждый</STRONG> элемент системы представляет собой 
      файл - даже служебная информация. Самый главный файл на NTFS называется 
      MFT, или Master File Table - общая таблица файлов. Именно он размещается в 
      MFT зоне и представляет собой централизованный каталог всех остальных 
      файлов диска, и, как не парадоксально, себя самого. MFT поделен на записи 
      фиксированного размера (обычно 1 Кбайт), и каждая запись соответствует 
      какому либо файлу (в общем смысле этого слова). Первые 16 файлов носят 
      служебный характер и недоступны операционной системе - они называются 
      метафайлами, причем самый первый метафайл - сам MFT. Эти первые 16 
      элементов MFT - единственная часть диска, имеющая фиксированное положение. 
      Интересно, что вторая копия первых трех записей, для надежности - они 
      очень важны - хранится ровно посередине диска. Остальной MFT-файл может 
      располагаться, как и любой другой файл, в произвольных местах диска - 
      восстановить его положение можно с помощью его самого, "зацепившись" за 
      самую основу - за первый элемент MFT.</P>
      <H3>Метафайлы</H3>
      <P>Первые 16 файлов NTFS (метафайлы) носят служебный характер. Каждый из 
      них отвечает за какой-либо аспект работы системы. Преимущество настолько 
      модульного подхода заключается в поразительной гибкости - например, на 
      FAT-е физическое повреждение в самой области FAT фатально для 
      функционирования всего диска, а NTFS может сместить, даже фрагментировать 
      по диску, все свои служебные области, обойдя любые неисправности 
      поверхности - кроме первых 16 элементов MFT. </P>
      <P>Метафайлы находятся корневом каталоге NTFS диска - они начинаются с 
      символа имени "$", хотя получить какую-либо информацию о них стандартными 
      средствами сложно. Любопытно, что и для этих файлов указан вполне реальный 
      размер - можно узнать, например, сколько операционная система тратит на 
      каталогизацию всего вашего диска, посмотрев размер файла $MFT. В следующей 
      таблице приведены используемые в данный момент метафайлы и их 
      назначение.</P>
      <DIV align=center>
      <TABLE width="75%" border=1>
        <TBODY>
        <TR>
          <TD width="16%">$MFT</TD>
          <TD width="84%">сам MFT</TD></TR>
        <TR>
          <TD width="16%">$MFTmirr</TD>
          <TD width="84%">копия первых 16 записей MFT, размещенная посередине 
            диска</TD></TR>
        <TR>
          <TD width="16%">$LogFile</TD>
          <TD width="84%">файл поддержки журналирования (см. ниже)</TD></TR>
        <TR>
          <TD width="16%">$Volume</TD>
          <TD width="84%">служебная информация - метка тома, версия файловой 
            системы, т.д.</TD></TR>
        <TR>
          <TD width="16%">$AttrDef</TD>
          <TD width="84%">список стандартных атрибутов файлов на томе</TD></TR>
        <TR>
          <TD width="16%">$.</TD>
          <TD width="84%">корневой каталог</TD></TR>
        <TR>
          <TD width="16%">$Bitmap</TD>
          <TD width="84%">карта свободного места тома</TD></TR>
        <TR>
          <TD width="16%" height=25>$Boot</TD>
          <TD width="84%" height=25>загрузочный сектор (если раздел 
            загрузочный)</TD></TR>
        <TR>
          <TD width="16%">$Quota</TD>
          <TD width="84%">файл, в котором записаны права пользователей на 
            использование дискового пространства (начал работать лишь в 
        NT5)</TD></TR>
        <TR>
          <TD width="16%">$Upcase</TD>
          <TD width="84%">файл - таблица соответствия заглавных и прописных 
            букв в имен файлов на текущем томе. Нужен в основном потому, что в 
            NTFS имена файлов записываются в Unicode, что составляет 65 тысяч 
            различных символов, искать большие и малые эквиваленты которых очень 
            нетривиально.</TD></TR></TBODY></TABLE></DIV>
      <H3>Файлы и потоки</H3>
      <P>Итак, у системы есть файлы - и ничего кроме файлов. Что включает в себя 
      это понятие на NTFS?</P>
      <UL>
        <LI>Прежде всего, обязательный элемент - запись в MFT, ведь, как было 
        сказано ранее, все файлы диска упоминаются в MFT. В этом месте хранится 
        вся информация о файле, за исключением собственно данных. Имя файла, 
        размер, положение на диске отдельных фрагментов, и т.д. Если для 
        информации не хватает одной записи MFT, то используются несколько, 
        причем не обязательно подряд. 
        <LI>Опциональный элемент - потоки данных файла. Может показаться 
        странным определение "опциональный", но, тем не менее, ничего странного 
        тут нет. Во-первых, файл может не иметь данных - в таком случае на него 
        не расходуется свободное место самого диска. Во-вторых, файл может иметь 
        не очень большой размер. Тогда идет в ход довольно удачное решение: 
        данные файла хранятся прямо в MFT, в оставшемся от основных данных месте 
        в пределах одной записи MFT. Файлы, занимающие сотни байт, обычно не 
        имеют своего "физического" воплощения в основной файловой области - все 
        данные такого файла хранятся в одном месте - в MFT. </LI></UL>
      <P>Довольно интересно обстоит дело и с данными файла. Каждый файл на NTFS, 
      в общем-то, имеет несколько абстрактное строение - у него нет как таковых 
      данных, а есть потоки (streams). Один из потоков и носит привычный нам 
      смысл - данные файла. Но большинство атрибутов файла - тоже потоки! Таким 
      образом, получается, что базовая сущность у файла только одна - номер в 
      MFT, а всё остальное опционально. Данная абстракция может использоваться 
      для создания довольно удобных вещей - например, файлу можно "прилепить" 
      еще один поток, записав в него любые данные - например, информацию об 
      авторе и содержании файла, как это сделано в Windows 2000 (самая правая 
      закладка в свойствах файла, просматриваемых из проводника). Интересно, что 
      эти дополнительные потоки не видны стандартными средствами: наблюдаемый 
      размер файла - это лишь размер основного потока, который содержит 
      традиционные данные. Можно, к примеру, иметь файл нулевой длинны, при 
      стирании которого освободится 1 Гбайт свободного места - просто потому, 
      что какая-нибудь хитрая программа или технология прилепила в нему 
      дополнительный поток (альтернативные данные) гигабайтового размера. Но на 
      самом деле в текущий момент потоки практически не используются, так что 
      опасаться подобных ситуаций не следует, хотя гипотетически они возможны. 
      Просто имейте в виду, что файл на NTFS - это более глубокое и глобальное 
      понятие, чем можно себе вообразить просто просматривая каталоги диска. Ну 
      и напоследок: имя файла может содержать любые символы, включая полый набор 
      национальных алфавитов, так как данные представлены в Unicode - 16-битном 
      представлении, которое дает 65535 разных символов. Максимальная длина 
      имени файла - 255 символов.</P>
      <H3>Каталоги</H3>
      <P>Каталог на NTFS представляет собой специфический файл, хранящий ссылки 
      на другие файлы и каталоги, создавая иерархическое строение данных на 
      диске. Файл каталога поделен на блоки, каждый из которых содержит имя 
      файла, базовые атрибуты и ссылку на элемент MFT, который уже предоставляет 
      полную информацию об элементе каталога. Внутренняя структура каталога 
      представляет собой бинарное дерево. Вот что это означает: для поиска файла 
      с данным именем в линейном каталоге, таком, например, как у FAT-а, 
      операционной системе приходится просматривать все элементы каталога, пока 
      она не найдет нужный. Бинарное же дерево располагает имена файлов таким 
      образом, чтобы поиск файла осуществлялся более быстрым способом - с 
      помощью получения двухзначных ответов на вопросы о положении файла. 
      Вопрос, на который бинарное дерево способно дать ответ, таков: в какой 
      группе, относительно данного элемента, находится искомое имя - выше или 
      ниже? Мы начинаем с такого вопроса к среднему элементу, и каждый ответ 
      сужает зону поиска в среднем в два раза. Файлы, скажем, просто 
      отсортированы по алфавиту, и ответ на вопрос осуществляется очевидным 
      способом - сравнением начальных букв. Область поиска, суженная в два раза, 
      начинает исследоваться аналогичным образом, начиная опять же со среднего 
      элемента.</P>
      <CENTER><IMG height=294 alt="" 
      src="iXBT Файловая система NTFS_files/image002.gif" width=468> </CENTER>
      <P>Вывод - для поиска одного файла среди 1000, например, FAT придется 
      осуществить в среднем 500 сравнений (наиболее вероятно, что файл будет 
      найден на середине поиска), а системе на основе дерева - всего около 12-ти 
      (2^10 = 1024). Экономия времени поиска налицо. Не стоит, однако думать, 
      что в традиционных системах (FAT) всё так запущено: во-первых, поддержание 
      списка файлов в виде бинарного дерева довольно трудоемко, а во-вторых - 
      даже FAT в исполнении современной системы (Windows2000 или Windows98) 
      использует сходную оптимизацию поиска. Это просто еще один факт в вашу 
      копилку знаний. Хочется также развеять распространенное заблуждение 
      (которое я сам разделял совсем еще недавно) о том, что добавлять файл в 
      каталог в виде дерева труднее, чем в линейный каталог: это достаточно 
      сравнимые по времени операции - дело в том, что для того, чтобы добавить 
      файл в каталог, нужно сначала убедится, что файла с таким именем там еще 
      нет :) - и вот тут-то в линейной системе у нас будут трудности с поиском 
      файла, описанные выше, которые с лихвой компенсируют саму простоту 
      добавления файла в каталог.</P>
      <P>Какую информацию можно получить, просто прочитав файл каталога? Ровно 
      то, что выдает команда dir. Для выполнения простейшей навигации по диску 
      не нужно лазить в MFT за каждым файлом, надо лишь читать самую общую 
      информацию о файлах из файлов каталогов. Главный каталог диска - корневой 
      - ничем не отличается об обычных каталогов, кроме специальной ссылки на 
      него из начала метафайла MFT.</P>
      <H3>Журналирование</H3>
      <P>NTFS - отказоустойчивая система, которая вполне может привести себя в 
      корректное состояние при практически любых реальных сбоях. Любая 
      современная файловая система основана на таком понятии, как 
      <STRONG>транзакция</STRONG> - действие, совершаемое целиком и корректно 
      или не совершаемое вообще. У NTFS просто не бывает промежуточных 
      (ошибочных или некорректных) состояний - квант изменения данных не может 
      быть поделен на до и после сбоя, принося разрушения и путаницу - он либо 
      совершен, либо отменен.</P>
      <P><STRONG><EM>Пример 1:</EM></STRONG> осуществляется запись данных на 
      диск. Вдруг выясняется, что в то место, куда мы только что решили записать 
      очередную порцию данных, писать не удалось - физическое повреждение 
      поверхности. Поведение NTFS в этом случае довольно логично: транзакция 
      записи откатывается целиком - система осознает, что запись не произведена. 
      Место помечается как сбойное, а данные записываются в другое место - 
      начинается новая транзакция.</P>
      <P><STRONG><EM>Пример 2:</EM></STRONG> более сложный случай - идет запись 
      данных на диск. Вдруг, бах - отключается питание и система 
      перезагружается. На какой фазе остановилась запись, где есть данные, а где 
      чушь? На помощь приходит другой механизм системы - журнал транзакций. Дело 
      в том, что система, осознав свое желание писать на диск, пометила в 
      метафайле $LogFile это свое состояние. При перезагрузке это файл изучается 
      на предмет наличия незавершенных транзакций, которые были прерваны аварией 
      и результат которых непредсказуем - все эти транзакции отменяются: место, 
      в которое осуществлялась запись, помечается снова как свободное, индексы и 
      элементы MFT приводятся в с состояние, в котором они были до сбоя, и 
      система в целом остается стабильна. Ну а если ошибка произошла при записи 
      в журнал? Тоже ничего страшного: транзакция либо еще и не начиналась (идет 
      только попытка записать намерения её произвести), либо уже закончилась - 
      то есть идет попытка записать, что транзакция на самом деле уже выполнена. 
      В последнем случае при следующей загрузке система сама вполне разберется, 
      что на самом деле всё и так записано корректно, и не обратит внимания на 
      "незаконченную" транзакцию.</P>
      <P>И все-таки помните, что журналирование - не абсолютная панацея, а лишь 
      средство существенно сократить число ошибок и сбоев системы. Вряд ли 
      рядовой пользователь NTFS хоть когда-нибудь заметит ошибку системы или 
      вынужден будет запускать chkdsk - опыт показывает, что NTFS 
      восстанавливается в полностью корректное состояние даже при сбоях в очень 
      загруженные дисковой активностью моменты. Вы можете даже оптимизировать 
      диск и в самый разгар этого процесса нажать reset - вероятность потерь 
      данных даже в этом случае будет очень низка. Важно понимать, однако, что 
      система восстановления NTFS гарантирует корректность <STRONG>файловой 
      системы</STRONG>, а не ваших данных. Если вы производили запись на диск и 
      получили аварию - ваши данные могут и не записаться. Чудес не бывает.</P>
      <H3>Сжатие</H3>
      <P>Файлы NTFS имеют один довольно полезный атрибут - "сжатый". Дело в том, 
      что NTFS имеет встроенную поддержку сжатия дисков - то, для чего раньше 
      приходилось использовать Stacker или DoubleSpace. Любой файл или каталог в 
      индивидуальном порядке может хранится на диске в сжатом виде - этот 
      процесс совершенно прозрачен для приложений. Сжатие файлов имеет очень 
      высокую скорость и только одно большое отрицательное свойство - огромная 
      виртуальная фрагментация сжатых файлов, которая, правда, никому особо не 
      мешает. Сжатие осуществляется блоками по 16 кластеров и использует так 
      называемые "виртуальные кластеры" - опять же предельно гибкое решение, 
      позволяющее добиться интересных эффектов - например, половина файла может 
      быть сжата, а половина - нет. Это достигается благодаря тому, что хранение 
      информации о компрессированности определенных фрагментов очень похоже на 
      обычную фрагментацию файлов: например, типичная запись физической 
      раскладки для реального, несжатого, файла: </P>
      <BLOCKQUOTE>
        <P>кластеры файла с 1 по 43-й хранятся в кластерах диска начиная с 
        400-го</P>
        <P>кластеры файла с 44 по 52-й хранятся в кластерах диска начиная с 
        8530-го ... </P></BLOCKQUOTE>
      <P>Физическая раскладка типичного сжатого файла: </P>
      <BLOCKQUOTE>
        <P>кластеры файла с 1 по 9-й хранятся в кластерах диска начиная с 
        400-го</P>
        <P>кластеры файла с 10 по 16-й нигде не хранятся</P>
        <P>кластеры файла с 17 по 18-й хранятся в кластерах диска начиная с 
        409-го</P>
        <P>кластеры файла с 19 по 36-й нигде не хранятся</P></BLOCKQUOTE>
      <CENTER><IMG height=158 alt="" 
      src="iXBT Файловая система NTFS_files/image003.gif" width=548> </CENTER>
      <P>Видно, что сжатый файл имеет "виртуальные" кластеры, реальной 
      информации в которых нет. Как только система видит такие виртуальные 
      кластеры, она тут же понимает, что данные предыдущего блока, кратного 
      16-ти, должны быть разжаты, а получившиеся данные как раз заполнят 
      виртуальные кластеры - вот, по сути, и весь алгоритм.</P>
      <H3>Безопасность</H3>
      <P>NTFS содержит множество средств разграничения прав объектов - есть 
      мнение, что это самая совершенная файловая система из всех ныне 
      существующих. В теории это, без сомнения, так, но в текущих реализациях, к 
      сожалению, система прав достаточно далека от идеала и представляет собой 
      хоть и жесткий, но не всегда логичный набор характеристик. Права, 
      назначаемые любому объекту и однозначно соблюдаемые системой, 
      эволюционируют - крупные изменения и дополнения прав осуществлялись уже 
      несколько раз и к Windows 2000 все-таки они пришли к достаточно разумному 
      набору.</P>
      <P>Права файловой системы NTFS неразрывно связаны с самой системой - то 
      есть они, вообще говоря, необязательны к соблюдению другой системой, если 
      ей дать физический доступ к диску. Для предотвращения физического доступа 
      в Windows2000 (NT5) всё же ввели стандартную возможность - об этом см. 
      ниже. Система прав в своем текущем состоянии достаточно сложна, и я 
      сомневаюсь, что смогу сказать широкому читателю что-нибудь интересное и 
      полезное ему в обычной жизни. Если вас интересует эта тема - вы найдете 
      множество книг по сетевой архитектуре NT, в которых это описано более чем 
      подробно.</P>
      <P>На этом описание строение файловой системы можно закончить, осталось 
      описать лишь некоторое количество просто практичных или оригинальных 
      вещей.</P>
      <H3>Hard Links</H3>
      <P>Эта штука была в NTFS с незапамятных времен, но использовалась очень 
      редко - и тем не менее: Hard Link - это когда один и тот же файл имеет два 
      имени (несколько указателей файла-каталога или разных каталогов указывают 
      на одну и ту же MFT запись). Допустим, один и тот же файл имеет имена 
      1.txt и 2.txt: если пользователь сотрет файл 1, останется файл 2. Если 
      сотрет 2 - останется файл 1, то есть оба имени, с момента создания, 
      совершенно равноправны. Файл физически стирается лишь тогда, когда будет 
      удалено его последнее имя.</P>
      <H3>Symbolic Links (NT5)</H3>
      <P>Гораздо более практичная возможность, позволяющая делать виртуальные 
      каталоги - ровно так же, как и виртуальные диски командой subst в DOSе. 
      Применения достаточно разнообразны: во-первых, упрощение системы 
      каталогов. Если вам не нравится каталог Documents and 
      settings\Administrator\Documents, вы можете прилинковать его в корневой 
      каталог - система будет по прежнему общаться с каталогом с дремучим путем, 
      а вы - с гораздо более коротким именем, полностью ему эквивалентным. Для 
      создания таких связей можно воспользоваться программой junction (<A 
      href="http://www.ixbt.com/storage/images/ntfs/junction.zip">junction.zip</A> 
      (15 Kb), 36 кб), которую написал известный специалист Mark Russinovich (<A 
      href="http://www.sysinternals.com/">http://www.sysinternals.com/</A>). 
      Программа работает только в NT5 (Windows 2000), как и сама 
возможность.</P>
      <P>Для удаления связи можно воспользоваться стандартной командой 
      rd.<BR><STRONG>ВНИМАНИЕ:</STRONG> Попытка уделения связи с помощью 
      проводника или других файловых менеджеров, не понимающих виртуальную 
      природу каталога (например, FAR), приведет к удалению данных, на которые 
      ссылается ссылка! Будьте осторожны.</P>
      <H3>Шифрование (NT5)</H3>
      <P>Полезная возможность для людей, которые беспокоятся за свои секреты - 
      каждый файл или каталог может также быть зашифрован, что не даст 
      возможность прочесть его другой инсталляцией NT. В сочетании со 
      стандартным и практически непрошибаемым паролем на загрузку самой системы, 
      эта возможность обеспечивает достаточную для большинства применений 
      безопасность избранных вами важных данных.</P>
      <H2>Часть 2. Особенности дефрагментации NTFS</H2>
      <P>Вернемся к одному достаточно интересному и важному моменту - 
      фрагментации и дефрагментации NTFS. Дело в том, что ситуация, сложившаяся 
      с этими двумя понятиями в настоящий момент, никак не может быть названа 
      удовлетворительной. В самом начале утверждалось, что NTFS не подвержена 
      фрагментации файлов. Это оказалось не совсем так, и утверждение сменили - 
      NTFS препятствует фрагментации. Оказалось, что и это не совсем так. То 
      есть она, конечно, препятствует, но толк от этого близок к нулю... Сейчас 
      уже понятно, что NTFS - система, которая как никакая другая 
      предрасположена к фрагментации, что бы ни утверждалось официально. 
      Единственное что - логически она не очень от этого страдает. Все 
      внутренние структуры построены таким образом, что фрагментация не мешает 
      быстро находить фрагменты данных. Но от физического последствия 
      фрагментации - лишних движений головок - она, конечно, не спасает. И 
      поэтому - вперед и с песней...</P>
      <H3>К истокам проблемы...</H3>
      <P>Как известно, система сильнее всего фрагментирует файлы когда свободное 
      место кончается, когда приходится использовать мелкие дырки, оставшиеся от 
      других файлов. Тут возникает первое свойство NTFS, которое прямо 
      способствует серьезной фрагментации.</P>
      <P>Диск NTFS поделен на две зоны. В начала диска идет MFT зона - зона, 
      куда растет MFT, Master File Table. Зона занимает минимум 12% диска, и 
      запись данных в эту зону невозможна. Это сделано для того, чтобы не 
      фрагментировался хотя бы MFT. Но когда весь остальной диск заполняется - 
      зона сокращается ровно в два раза :). И так далее. Таким образом мы имеем 
      не один заход окончания диска, а несколько. В результате если NTFS 
      работает при диске, заполненном на около 90% - фрагментация растет как 
      бешенная.</P>
      <BLOCKQUOTE>
        <P>Попутное следствие - диск, заполненный более чем на 88%, 
        дефрагментировать почти невозможно - даже API дефрагментации не может 
        перемещать данные в MFT зону. Может оказаться так, что у нас не будет 
        свободного места для маневра. </P></BLOCKQUOTE>
      <P>Далее. NTFS работает себе и работает, и всё таки фрагментируется - даже 
      в том случае, если свободное место далеко от истощения. Этому способствует 
      странный алгоритм нахождения свободного места для записи файлов - второе 
      серьезное упущение. Алгоритм действий при любой записи такой: берется 
      какой-то определенный объем диска и заполняется файлом до упора. Причем по 
      очень интересному алгоритму: сначала заполняются большие дырки, потом 
      маленькие. Т.е. типичное распределение фрагментов файла по размеру на 
      фрагментированной NTFS выглядит так (размеры фрагментов):</P>
      <P>16 - 16 - 16 - 16 - 16 - [скачек назад] - 15 - 15 - 15 - [назад] - 14 - 
      14 - 14 .... 1 - 1 - 1 -1 - 1...</P>
      <P>Так процесс идет до самых мелких дырок в 1 кластер, несмотря на то, что 
      на диске наверняка есть и гораздо более большие куски свободного 
места.</P>
      <P>Вспомните сжатые файлы - при активной перезаписи больших объемов сжатой 
      информации на NTFS образуется гигантское количество "дырок" из-за 
      перераспределения на диске сжатых объемов - если какой-либо участок файла 
      стал сжиматься лучше или хуже, его приходится либо изымать из непрерывной 
      цепочки и размещать в другом месте, либо стягивать в объеме, оставляя за 
      собой дырку.</P>
      <P>Смысл в сего этого вступления в пояснении того простого факта, что 
      никак нельзя сказать, что NTFS препятствует фрагментации файлов. Наоборот, 
      она с радостью их фрагментирует. Фрагментация NTFS через пол года работы 
      доведет до искреннего удивления любого человека, знакомого с работой 
      файловой системой. Поэтому приходится запускать дефрагментатор. Но на этом 
      все наши проблемы не заканчиваются, а, увы, только начинаются...</P>
      <H3>Средства решения?</H3>
      <P>В NT существует стандартное API дефрагментации. Обладающее интересным 
      ограничением для перемещения блоков файлов: за один раз можно перемещать 
      не менее 16 кластеров (!), причем начинаться эти кластеры должны с 
      позиции, кратной 16 кластерам в файле. В общем, операция осуществляется 
      исключительно по 16 кластеров. Следствия:</P>
      <OL>
        <LI>В дырку свободного места менее 16 кластеров нельзя ничего 
        переместить (кроме сжатых файлов, но это неинтересные в данный момент 
        тонкости). 
        <LI>Файл, будучи перемещенный в другое место, оставляет после себя (на 
        новом месте) "временно занятое место", дополняющее его по размеру до 
        кратности 16 кластерам. 
        <LI>При попытке как-то неправильно ("не кратно 16") переместить файл 
        результат часто непредсказуем. Что-то округляется, что-то просто не 
        перемещается… Тем не менее, всё место действия щедро рассыпается 
        "временно занятым местом". </LI></OL>
      <P>"Временно занятое место" служит для облегчения восстановления системы в 
      случае аппаратного сбоя и освобождается через некоторое время, обычно 
      где-то пол минуты.</P>
      <P>Тем не менее, логично было бы использовать это API, раз он есть. Его и 
      используют. Поэтому процесс стандартной дефрагментации, с поправками на 
      ограниченность API, состоит из следующих фаз (не обязательно в этом 
      порядке):</P>
      <UL>
        <LI>Вынимание файлов из MFT зоны. Не специально - просто обратно туда их 
        положить не представляется возможным :) Безобидная фаза, и даже в чем то 
        полезная. 
        <LI>Дефрагментация файлов. Безусловно, полезный процесс, несколько, 
        правда, осложняемый ограничениями кратности перемещений - файлы часто 
        приходится перекладывать сильнее, чем это было бы логично сделать по 
        уму. 
        <LI>Дефрагментация MFT, виртуалки (pagefile.sys) и каталогов. Возможна 
        через API только в Windows2000, иначе - при перезагрузке, отдельным 
        процессом, как в старом Diskeeper-е. 
        <LI>Складывание файлов ближе к началу - так называемая дефрагментация 
        свободного места. Вот это - воистину страшный процесс... </LI></UL>
      <P>Допустим, мы хотим положить файлы подряд в начало диска. Кладем один 
      файл. Он оставляет хвост занятости дополнения до кратности 16. Кладем 
      следующий - после хвоста, естественно. Через некоторое время, по 
      освобождению хвоста, имеем дырку &lt;16 кластеров размером. Которую потом 
      невозможно заполнить через API дефрагментации! В результате, до 
      оптимизации картина свободного места выглядела так: много дырок примерно 
      одинакового размера. После оптимизации - одна дыра в конце диска, и много 
      маленьких &lt;16 кластеров дырок в заполненном файлами участке. Какие 
      места в первую очередь заполняются? Правильно, находящиеся ближе к началу 
      диска мелкие дырки &lt;16 кластеров... Любой файл, плавно созданный на 
      прооптимизированном диске, будет состоять из дикого числа фрагментов. Да, 
      диск потом можно оптимизировать снова. А потом еще раз.. и еще.. и так - 
      желательно каждую неделю. Бред? Реальность.</P>
      <P>Таким образом, имеется два примерно равнозначных варианта. Первый - 
      часто оптимизировать диск таким дефрагментатором, смиряясь при этом с 
      дикой фрагментацией заново созданных файлов. Второй вариант - вообще 
      ничего не трогать, и смириться с равномерной, но гораздо более слабой 
      фрагментацией всех файлов на диске.</P>
      <P>Пока есть всего один дефрагментатор, который игнорирует API 
      дефрагментации и работает как-то более напрямую - Norton Speeddisk 5.0 для 
      NT. Когда его пытаются сравнить со всеми остальными - Diskeeper, O&amp;O 
      defrag, т.д. - не упоминают этого главного, самого принципиального, 
      отличия. Просто потому, что эта проблема тщательно скрывается, по крайней 
      мере уж точно не афишируется на каждом шагу. Speeddisk - единственная на 
      сегодняшний день программа, которая может оптимизировать диск полностью, 
      не создавая маленьких незаполненных фрагментов свободного места. Стоит 
      добавить также, что при помощи стандартного API невозможно 
      дефрагментировать тома NTFS с кластером более 4 Кбайт, а SpeedDisk и это 
      может.</P>
      <P>К сожалению, в Windows 2000 поместили дефрагментатор, который работает 
      через API, и, соответственно, плодит дырки &lt;16 кластеров. Так что как 
      только появится (если еще не появился) - так сразу надо качать Speeddisk 
      для W2k. </P>
      <P>Как некоторый вывод из всего этого: все остальные дефрагментаторы при 
      одноразовом применении просто вредны. Если вы запускали его хоть раз - 
      нужно запускать его потом хотя бы раз в месяц, чтобы избавится от 
      фрагментации новоприбывающих файлов. В этом основная суть сложности 
      дефрагментации NTFS теми средствами, которые сложились исторически.</P>
      <H2>Часть 3. Что выбрать?</H2>
      <P>Любая из представленных ныне файловых систем уходит своими корнями в 
      глубокое прошлое - еще к 80-м годам. Да, NTFS, как это не странно - очень 
      старая система! Дело в том, что долгое время персональные компьютеры 
      пользовались лишь операционной системой DOS, которой и обязана своим 
      появлением FAT. Но параллельно разрабатывались и тихо существовали 
      системы, нацеленные на будущее. Две таких системы, получившие всё же 
      широкое признание - NTFS, созданная для операционной системы Windows NT 
      3.1 еще в незапамятные времена, и HPFS - верная спутница OS/2.</P>
      <P>Внедрение новых систем шло трудно - еще в 95м году, с выходом 
      Windows95, ни у кого не было и мыслей о том, что что-то нужно менять - FAT 
      получил второе дыхание посредством налепленной сверху заплатки "длинные 
      имена", реализация которых там хоть и близка к идеально возможной без 
      изменения системы, но всё же довольно бестолкова. Но в последующие годы 
      необходимость перемен назрела окончательно, поскольку естественные 
      ограничения FAT стали давать о себе знать. FAT32, появившаяся в Windows 95 
      OSR2, просто сдвинула рамки - не изменив сути системы, которая просто не 
      дает возможности организовать эффективную работу с большим количеством 
      данных.</P>
      <P>HPFS (High Performance File System), активно применяемая до сих пор 
      пользователями OS/2, показала себя достаточно удачной системой, но и она 
      имела существенные недостатки - полное отсутствие средств автоматической 
      восстанавливаемости, излишнюю сложность организации данных и невысокую 
      гибкость.</P>
      <P>NTFS же долго не могла завоевать персональные компьютеры из-за того, 
      что для организации эффективной работы с её структурами данных требовались 
      значительные объемы памяти. Системы с 4 или 8 Мбайт (стандарт 95-96 годов) 
      были просто неспособны получить хоть какой-либо плюс от NTFS, поэтому за 
      ней закрепилась не очень правильная репутация медленной и громоздкой 
      системы. На самом деле это не соответствует действительности - современные 
      компьютерные системы с памятью более 64 Мб получают просто огромный 
      прирост производительности от использования NTFS.</P>
      <P>В данной таблице сведены воедино все существенные плюсы и минусы 
      распространенных в наше время систем, таких как FAT32, FAT и NTFS. Вряд ли 
      разумно обсуждать другие системы, так как в настоящее время 97% 
      пользователей делают выбор между Windows98, Windows NT4.0 и Windows 2000 
      (NT5.0), а других вариантов там просто нет.</P>
      <TABLE width="100%" border=1>
        <TBODY>
        <TR>
          <TD width="21%">
            <DIV align=center><STRONG></STRONG></DIV></TD>
          <TD width="25%">
            <DIV align=center><STRONG>FAT </STRONG></DIV></TD>
          <TD width="23%">
            <DIV align=center><STRONG>FAT32</STRONG></DIV></TD>
          <TD width="31%">
            <DIV align=center><STRONG>NTFS </STRONG></DIV></TD></TR>
        <TR>
          <TD width="21%">Системы, её поддерживающие</TD>
          <TD width="25%">DOS, Windows9Х, NT всех версий</TD>
          <TD width="23%">Windows98, NT5</TD>
          <TD width="31%">NT4, NT5</TD></TR>
        <TR>
          <TD width="21%">Максимальный размер тома</TD>
          <TD width="25%">2 Гбайт</TD>
          <TD width="23%">практически неограничен</TD>
          <TD width="31%">практически неограничен</TD></TR>
        <TR>
          <TD width="21%">Макс. число файлов на томе</TD>
          <TD width="25%">примерно 65 тысяч</TD>
          <TD width="23%">практически не ограничено</TD>
          <TD width="31%">практически не ограничено</TD></TR>
        <TR>
          <TD width="21%">Имя файла</TD>
          <TD width="25%">с поддержкой длинных имен - 255 символов, системный 
            набор символов</TD>
          <TD width="23%">с поддержкой длинных имен - 255 символов, системный 
            набор символов</TD>
          <TD width="31%">255 символов, любые символы любых алфавитов (65 
            тысяч разных начертаний)</TD></TR>
        <TR>
          <TD width="21%">Возможные атрибуты файла</TD>
          <TD width="25%">Базовый набор</TD>
          <TD width="23%">Базовый набор</TD>
          <TD width="31%">всё, что придет в голову производителям программного 
            обеспечения</TD></TR>
        <TR>
          <TD width="21%">Безопасность</TD>
          <TD width="25%">нет</TD>
          <TD width="23%">нет</TD>
          <TD width="31%">да (начиная с NT5.0 встроена возможность физически 
            шифровать данные)</TD></TR>
        <TR>
          <TD width="21%" height=32>Сжатие</TD>
          <TD width="25%" height=32>нет </TD>
          <TD width="23%" height=32>нет</TD>
          <TD width="31%" height=32>да</TD></TR>
        <TR>
          <TD width="21%">Устойчивость к сбоям</TD>
          <TD width="25%">средняя (система слишком проста и поэтому ломаться 
            особо нечему :))</TD>
          <TD width="23%">плохая (средства оптимизации по скорости привели к 
            появлению слабых по надежности мест)</TD>
          <TD width="31%">полная - автоматическое восстановление системы при 
            любых сбоях (не считая физические ошибки записи, когда пишется одно, 
            а на самом деле записывается другое)</TD></TR>
        <TR>
          <TD width="21%">Экономичность</TD>
          <TD width="25%">минимальная (огромные размеры кластеров на больших 
            дисках)</TD>
          <TD width="23%">улучшена за счет уменьшения размеров кластеров</TD>
          <TD width="31%">максимальна. Очень эффективная и разнообразная 
            система хранения данных</TD></TR>
        <TR>
          <TD width="21%">Быстродействие</TD>
          <TD width="25%">высокое для малого числа файлов, но быстро 
            уменьшается с появлением большого количества файлов в каталогах. 
            результат - для слабо заполненных дисков - максимальное, для 
            заполненных - плохое </TD>
          <TD width="23%">полностью аналогично FAT, но на дисках большого 
            размера (десятки гигабайт) начинаются серьезные проблемы с общей 
            организацией данных</TD>
          <TD width="31%">система не очень эффективна для малых и простых 
            разделов (до 1 Гбайт), но работа с огромными массивами данных и 
            внушительными каталогами организована как нельзя более эффективно и 
            очень сильно превосходит по скорости другие 
      системы</TD></TR></TBODY></TABLE>
      <P>Хотелось бы сказать, что если ваша операционная система - NT (Windows 
      2000), то использовать какую-либо файловую систему, отличную от NTFS - 
      значит существенно ограничивать свое удобство и гибкость работы самой 
      операционной системы. NT, а особенно Windows 2000, составляет с NTFS как 
      бы две части единого целого - множество полезных возможностей NT напрямую 
      завязано на физическую и логическую структуру файловой системы, и 
      использовать там FAT или FAT32 имеет смысл лишь для совместимости - если у 
      вас стоит задача читать эти диски из каких-либо других систем. </P>
      <P><EM><STRONG>Хотелось бы выразить искреннюю признательность Андрею 
      Шабалину (<A 
      href="mailto:a.shabalin@public.mtu.ru">a.shabalin@public.mtu.ru</A>), без 
      которого эта статья просто не была бы написана, а даже будучи написанной, 
      содержала бы много досадных неточностей.</STRONG></EM></P></TD></TR>
  <TR>
    <TD>
      <H2><A href="http://www.ixbt.com/storage/ntfs2.html">Продолжение читайте в 
      статье "Надежность дисковой системы NT"</A></H2></TD></TR>
  <TR>
    <TD>
      <DIV align=right>
      <ADDRESS><STRONG>Дмитрий Михайлов</STRONG> (<A 
      href="mailto:dmitry.mih@mtu-net.ru">mailto:dmitry.mih@mtu-net.ru</A><A 
      href="http://www.mtu-net.ru/pinetar/dm">http://www.mtu-net.ru/pinetar/dm</A> 
      <BR>Опубликовано -- 24 июля 2000 г.<BR></ADDRESS></DIV></TD></TR>
  <TR>
    <TD>&nbsp;</TD></TR></TBODY></TABLE></CENTER><BR><BR>
<CENTER><FONT size=-1>Комментарии?&nbsp; Поправки?&nbsp; Дополнения? <A 
href="mailto:niko@ixbt.com">niko@ixbt.com</A></FONT></CENTER><!-- Текстовая строка рекламы сквозная по разделу --><BR><BR>
<CENTER><SPAN class=small></SPAN></CENTER><!-- Конец: Текстовая строка рекламы сквозная по разделу --><BR>
<CENTER><A 
href="http://rose.ixbt.com/cgi-bin/click_i.cgi?id=1020&amp;pg=1256"><IMG 
height=60 alt="" src="iXBT Файловая система NTFS_files/canond60-nikond100.gif" 
width=468 border=0></A></CENTER><BR>
<CENTER><MAP name=bar><AREA shape=RECT alt="на главную страницу" 
  coords=0,7,82,17 href="http://www.ixbt.com/"><AREA shape=RECT 
  alt="на главную страницу" coords=188,14,288,24 
  href="http://www.ixbt.com/"><AREA shape=RECT alt="на главную страницу" 
  coords=519,8,595,48 href="http://www.ixbt.com/"></MAP><IMG height=52 alt="" 
src="iXBT Файловая система NTFS_files/2-top.gif" width=600 useMap=#bar 
border=0><BR><IMG height=2 alt="" 
src="iXBT Файловая система NTFS_files/empty.gif" width=600 border=0><BR><!-- Спонсорство в разделе 600х90 -->
<CENTER></CENTER><!-- Спонсорство в разделе 600х90 -->
<TABLE cellSpacing=0 cellPadding=0 width=600 border=0>
  <TBODY>
  <TR>
    <TD class=small align=middle><A 
      href="http://www.ixbt.com/news/index.shtml">Коротко</A> | <A 
      href="http://www.ixbt.com/cpu.shtml">Процессоры</A> | <A 
      href="http://www.ixbt.com/mainboard.shtml">Системные платы</A> | <A 
      href="http://www.ixbt.com/video.shtml">Видеосистема</A> | <A 
      href="http://www.ixbt.com/storage.shtml">Носители информации</A> | <A 
      href="http://www.ixbt.com/multimedia.shtml">Мультимедиа</A> | <A 
      href="http://www.ixbt.com/peripheral.shtml">Периферия</A> | <A 
      href="http://www.ixbt.com/communication.shtml">Коммуникации</A> | <A 
      href="http://www.ixbt.com/mobile.shtml">Мобильная связь</A> | <A 
      href="http://www.ixbt.com/digimage.shtml">Изображение в числах</A> | <A 
      href="http://www.ixbt.com/portopc.shtml">Портативные ПК</A> | <A 
      href="http://www.ixbt.com/editorial.shtml">Колонка редактора</A> | <A 
      href="http://computorg.ixbt.com/monitoring.shtml">Мониторинги цен</A> | <A 
      href="http://www.ixbt.com/search.shtml">Поиск</A> | <A 
      href="http://forum.ixbt.com/">Конференция</A> | <A 
      href="http://computorg.ixbt.com/guides.shtml">Искусство покупать</A> | <A 
      href="http://www.komok.com/">Барахолка</A> | <A 
      href="http://computorg.ixbt.com/">Новости московского рынка</A> | <A 
      href="http://mag.ixbt.com/">Журнал</A> </TD></TR></TBODY></TABLE><BR>
<TABLE cellSpacing=0 cellPadding=0 width=600 align=center border=0>
  <TBODY>
  <TR>
    <TD class=default vAlign=top align=middle>Copyright © by 
      <STRONG>iXBT.com</STRONG>, 1997-2002. Produced by 
      <STRONG>iXBT.com</STRONG><BR>Идея дизайна © 1998 студия <A 
      href="http://www.rusart.com/">РусАрт</A> / Редизайн © <A 
      href="mailto:dmitry@ixbt.com">Explosion</A> <BR><BR><!-- SpyLOG v2 f:0211 -->
      <SCRIPT language=javascript type=text/javascript> 
u="u1142.23.spylog.com";d=document;nv=navigator;na=nv.appName;p=1; 
bv=Math.round(parseFloat(nv.appVersion)*100); 
n=(na.substring(0,2)=="Mi")?0:1;rn=Math.random();z="p="+p+"&rn="+rn;y=""; 
y+="<a href='http://"+u+"/cnt?f=3&p="+p+"&rn="+rn+"' target=_blank>"; 
y+="<img src='http://"+u+"/cnt?"+z+ 
"&r="+escape(d.referrer)+"&pg="+escape(window.location.href)+"' border=0 width=88 height=31 alt='SpyLOG'>"; 
y+="</a>"; d.write(y);if(!n) { d.write("<"+"!--"); }//--></SCRIPT>
      <NOSCRIPT><A href="http://u1142.23.spylog.com/cnt?f=3&amp;p=1" 
      target=_blank><IMG height=31 alt=SpyLOG 
      src="iXBT Файловая система NTFS_files/cnt.gif" width=88 border=0></A> 
      </NOSCRIPT>
      <SCRIPT language=javascript1.2 type=text/javascript>
<!-- if(!n) { d.write("--"+">"); }//--></SCRIPT>
<!-- SpyLOG --><!--begin of Top100 logo--><A 
      href="http://top100.rambler.ru/top100/"><IMG height=31 
      alt="Rambler's Top100" 
      src="iXBT Файловая система NTFS_files/banner-88x31-rambler-blue.gif" 
      width=88 border=0></A> 
<!--end of Top100 logo --></TD></TR></TBODY></TABLE></CENTER></BODY></HTML>
